// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/message_usecase.go
//
// Generated by this command:
//
//	mockgen -source=usecase/message_usecase.go -destination=usecase/mocks/mock_message_usecase.go -package=mock_usecase
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	entity "MuchUp/backend/internal/domain/entity"
	reflect "reflect"

	gomock 	"github.com/golang/mock/gomock"
)

// MockMessageUsecase is a mock of MessageUsecase interface.
type MockMessageUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockMessageUsecaseMockRecorder
	isgomock struct{}
}

// MockMessageUsecaseMockRecorder is the mock recorder for MockMessageUsecase.
type MockMessageUsecaseMockRecorder struct {
	mock *MockMessageUsecase
}

// NewMockMessageUsecase creates a new mock instance.
func NewMockMessageUsecase(ctrl *gomock.Controller) *MockMessageUsecase {
	mock := &MockMessageUsecase{ctrl: ctrl}
	mock.recorder = &MockMessageUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageUsecase) EXPECT() *MockMessageUsecaseMockRecorder {
	return m.recorder
}

// CreateMessage mocks base method.
func (m *MockMessageUsecase) CreateMessage(message *entity.Message) (*entity.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMessage", message)
	ret0, _ := ret[0].(*entity.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMessage indicates an expected call of CreateMessage.
func (mr *MockMessageUsecaseMockRecorder) CreateMessage(message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMessage", reflect.TypeOf((*MockMessageUsecase)(nil).CreateMessage), message)
}

// DeleteMessage mocks base method.
func (m *MockMessageUsecase) DeleteMessage(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMessage", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMessage indicates an expected call of DeleteMessage.
func (mr *MockMessageUsecaseMockRecorder) DeleteMessage(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMessage", reflect.TypeOf((*MockMessageUsecase)(nil).DeleteMessage), id)
}

// GetMessage mocks base method.
func (m *MockMessageUsecase) GetMessage(id string) (*entity.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessage", id)
	ret0, _ := ret[0].(*entity.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessage indicates an expected call of GetMessage.
func (mr *MockMessageUsecaseMockRecorder) GetMessage(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessage", reflect.TypeOf((*MockMessageUsecase)(nil).GetMessage), id)
}

// GetMessageByID mocks base method.
func (m *MockMessageUsecase) GetMessageByID(id string) (*entity.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessageByID", id)
	ret0, _ := ret[0].(*entity.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessageByID indicates an expected call of GetMessageByID.
func (mr *MockMessageUsecaseMockRecorder) GetMessageByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessageByID", reflect.TypeOf((*MockMessageUsecase)(nil).GetMessageByID), id)
}

// GetMessagesByGroup mocks base method.
func (m *MockMessageUsecase) GetMessagesByGroup(groupID string, limit, offset int) ([]*entity.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessagesByGroup", groupID, limit, offset)
	ret0, _ := ret[0].([]*entity.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessagesByGroup indicates an expected call of GetMessagesByGroup.
func (mr *MockMessageUsecaseMockRecorder) GetMessagesByGroup(groupID, limit, offset any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessagesByGroup", reflect.TypeOf((*MockMessageUsecase)(nil).GetMessagesByGroup), groupID, limit, offset)
}

// SendMessage mocks base method.
func (m *MockMessageUsecase) SendMessage(message *entity.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockMessageUsecaseMockRecorder) SendMessage(message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockMessageUsecase)(nil).SendMessage), message)
}

// UnSentMessage mocks base method.
func (m *MockMessageUsecase) UnSentMessage(message *entity.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnSentMessage", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnSentMessage indicates an expected call of UnSentMessage.
func (mr *MockMessageUsecaseMockRecorder) UnSentMessage(message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnSentMessage", reflect.TypeOf((*MockMessageUsecase)(nil).UnSentMessage), message)
}

// UpdateMessage mocks base method.
func (m *MockMessageUsecase) UpdateMessage(message *entity.Message) (*entity.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMessage", message)
	ret0, _ := ret[0].(*entity.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMessage indicates an expected call of UpdateMessage.
func (mr *MockMessageUsecaseMockRecorder) UpdateMessage(message any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMessage", reflect.TypeOf((*MockMessageUsecase)(nil).UpdateMessage), message)
}
